You will build an API in Express.js, and TypeScript during this task.
Task: Build a CMS API
Your CMS API should have the following features:
Basic CRUD functionality for users
Every user should have an email, a name, a username, and a password.
Three types of users: Student, Professor, and Admin
Admins should be able to CRUD Professors
Professors should be able to enroll/unenroll Students from courses
Authentication for users (need not be OAuth, but brownie points if it is). Use JWTs for Authentication.
Basic CRUD functionality for courses, and course contents (for now, course contents should just be text announcements, with a title, and body).
Professors should be able to CRUD course contents, and nobody else.
Courses should have a course name, a course code and whatever contents it has.


Figure out the fastest and most secure way to use JWTs for authentication, and implement it. If you don’t have the time to implement it, at least read up on it, and we might have a discussion about this during the interview.
Implement comments: Students should be able to CRUD comments on course contents, and Professors/Admins should be able to delete these comments.
Add email verification for Students when registering
Allow Professors to upload files as course contents, store these files on the cloud (Firebase, Cloudinary, etc.)
So this means, course contents will now have a title, a body of text, and optionally file attachments.
Cache course contents in Redis, and use LRU, and set an expiry time for cached results.
Use a message broker or event queue like RabbitMQ or Kafka to allow Professors to schedule posting course contents.
Brownie points: Send email notifications to students enrolled in a course, when a course’s contents are updated.
You’ll be judged on the following
Coding best practices (modularity, conciseness, etc.).
How well and fast you pick up new concepts.
Having clear concepts (including relevant theory) on what is being used in the said tasks, and in general what frameworks you use.
How secure your API is, and various measures against some basic vulnerabilities.
How well you handle errors.
